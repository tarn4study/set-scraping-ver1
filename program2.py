# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'interface2.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets

from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.service import Service 
from webdriver_manager.chrome import ChromeDriverManager
import pandas as pd


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(552, 282)
        MainWindow.setMinimumSize(QtCore.QSize(80, 60))
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setEnabled(True)
        self.centralwidget.setObjectName("centralwidget")
        self.formLayout_2 = QtWidgets.QFormLayout(self.centralwidget)
        self.formLayout_2.setObjectName("formLayout_2")
        self.formLayout = QtWidgets.QFormLayout()
        self.formLayout.setObjectName("formLayout")
        self.url = QtWidgets.QLabel(self.centralwidget)
        self.url.setStyleSheet("font: 16pt \"Calibri\";\n"
"background-color: rgb(255, 255, 255);")
        self.url.setObjectName("url")
        self.formLayout.setWidget(0, QtWidgets.QFormLayout.LabelRole, self.url)
        self.urlinput = QtWidgets.QTextEdit(self.centralwidget)
        self.urlinput.setObjectName("urlinput")
        self.formLayout.setWidget(0, QtWidgets.QFormLayout.FieldRole, self.urlinput)
        self.export_location = QtWidgets.QLabel(self.centralwidget)
        self.export_location.setStyleSheet("font: 16pt \"Calibri\";\n"
"background-color: rgb(255, 255, 255);")
        self.export_location.setObjectName("export_location")
        self.formLayout.setWidget(2, QtWidgets.QFormLayout.LabelRole, self.export_location)
        self.output = QtWidgets.QLabel(self.centralwidget)
        self.output.setStyleSheet("font: 16pt \"Calibri\";")
        self.output.setObjectName("output")
        self.formLayout.setWidget(2, QtWidgets.QFormLayout.FieldRole, self.output)
        self.formLayout_2.setLayout(0, QtWidgets.QFormLayout.SpanningRole, self.formLayout)
        self.file_location = QtWidgets.QPushButton(self.centralwidget)
        self.file_location.setObjectName("file_location")
        self.formLayout_2.setWidget(1, QtWidgets.QFormLayout.LabelRole, self.file_location)
        self.export_button = QtWidgets.QPushButton(self.centralwidget)
        self.export_button.setObjectName("export_button")
        self.formLayout_2.setWidget(2, QtWidgets.QFormLayout.LabelRole, self.export_button)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 552, 21))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        self.file_location.clicked.connect(self.choose_directory)
        self.export_button.clicked.connect(self.export_to)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "โปรแกรมดึงข้อมูลหุ้น"))
        self.url.setText(_translate("MainWindow", "URL:"))
        self.export_location.setText(_translate("MainWindow", "Export Location:"))
        self.output.setText(_translate("MainWindow", "file location"))
        self.file_location.setText(_translate("MainWindow", "Choose location"))
        self.export_button.setText(_translate("MainWindow", "Export"))

    def choose_directory(self):
        print("Hello")
        folderpath = QtWidgets.QFileDialog.getExistingDirectory(None, 'Select Folder')
        self.output.setText(folderpath)

    def export_to(self):
        driver = webdriver.Chrome(service = Service(ChromeDriverManager().install()))

        link = self.urlinput.toPlainText()
        driver.get(link)
        
        name = driver.find_element(By.CSS_SELECTOR, "h1.symbol.text-white.mb-0.me-2")
        data_list = pd.read_html(driver.page_source)
        data_list[0].to_excel(self.output.text()+r"/"+name.text+r".xlsx")

        driver.close()

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
